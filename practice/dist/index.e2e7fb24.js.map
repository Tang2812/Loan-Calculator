{"mappings":"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","sources":["src/js/controllers/FormInputController.js"],"sourcesContent":["const FormInputController = {\r\n  innit: function () {\r\n    FormInputView.init();\r\n  },\r\n\r\n  // handle Loan Value\r\n  handleLoanValue: function (propertyValue, loanAmount, loanTerm, interestRate, disbursementDate) {\r\n    const object = new LoanModel(propertyValue, loanAmount, loanTerm, interestRate, disbursementDate);\r\n    let remainingOriginalAmount = object.loanAmount;\r\n    let origin;\r\n    let totaInterestPayple = 0;\r\n    let interest;\r\n    let result = [];\r\n    let minMonthlyPayment = remainingOriginalAmount;\r\n    let maxMonthlyPayment = 0;\r\n    let totalInterest;\r\n    let repaymentPeriod = object.disbursementDate;\r\n    let totalOrigin = this.reformater(object.loanAmount);\r\n    const resultRecord = new LoanPaymentModel(origin, remainingOriginalAmount, interest, repaymentPeriod);\r\n\r\n    // first record withouth caculation\r\n    result.push(resultRecord);\r\n\r\n    // Caculate Loan Payment\r\n    if (object.loanTerm < 2) {\r\n      interest = Math.round(remainingOriginalAmount * (object.interestRate / 100) / 12);\r\n      totaInterestPayple = remainingOriginalAmount + interest;\r\n      const resultRecord = new LoanPaymentModel(remainingOriginalAmount, remainingOriginalAmount, interest, object.disbursementDate, totaInterestPayple);\r\n      result.push(resultRecord);\r\n    } else {\r\n      origin = Math.round(remainingOriginalAmount / object.loanTerm);\r\n      for (let i = 1; i <= object.loanTerm; i++) {\r\n        interest = Math.round(remainingOriginalAmount * (object.interestRate / 100) / 12);\r\n        (remainingOriginalAmount - origin) >= 0 ? remainingOriginalAmount = remainingOriginalAmount - origin : remainingOriginalAmount = 0;\r\n        repaymentPeriod = this.calculateRepaymentDate(repaymentPeriod);\r\n        const resultRecord = new LoanPaymentModel(origin, remainingOriginalAmount, interest, repaymentPeriod);\r\n        totaInterestPayple = totaInterestPayple + resultRecord.toralPrincipalAndInterest;\r\n        if (minMonthlyPayment > resultRecord.toralPrincipalAndInterest) {\r\n          minMonthlyPayment = resultRecord.toralPrincipalAndInterest;\r\n        };\r\n        if (maxMonthlyPayment < resultRecord.toralPrincipalAndInterest) {\r\n          maxMonthlyPayment = resultRecord.toralPrincipalAndInterest;\r\n        }\r\n        result.push(resultRecord);\r\n      }\r\n    }\r\n\r\n    totalInterest = totaInterestPayple - loanAmount;\r\n\r\n    // reformat totalInterest\r\n    !isNaN(totalInterest) ? totalInterest = this.reformater(totalInterest) : totalInterest = 0;\r\n\r\n    // reformat totaInterestPayple\r\n    !isNaN(totaInterestPayple) ? totaInterestPayple = this.reformater(totaInterestPayple) : totaInterestPayple = 0;\r\n\r\n    // reformat minMonthlyPayment\r\n    !isNaN(minMonthlyPayment) ? minMonthlyPayment = this.reformater(minMonthlyPayment) : minMonthlyPayment = 0;\r\n\r\n    // reformat maxMonthlyPayment\r\n    !isNaN(maxMonthlyPayment) ? maxMonthlyPayment = this.reformater(maxMonthlyPayment) : maxMonthlyPayment = 0;\r\n\r\n    // save data to localStorage\r\n    localStorage.setItem('result', JSON.stringify(result));\r\n\r\n    // set value for table result\r\n    FormInputView.setValueOfTableResult(totaInterestPayple, minMonthlyPayment, maxMonthlyPayment, totalInterest, totalOrigin, result);\r\n  },\r\n\r\n  // validate value\r\n  validateValue: function (valueOfPropertyValue, valueOfLoanAmount, valueOfLoanTerm, valueOfInterestRate, valueOfDisbursementDate) {\r\n    const inputErrors = {\r\n      inputStatus: true,\r\n      errorMessages: []\r\n    };\r\n\r\n    // validate value of property\r\n    if (valueOfPropertyValue < 0 || isNaN(valueOfPropertyValue)) {\r\n      inputErrors.inputStatus = false;\r\n      if (valueOfPropertyValue <= 0) inputErrors.errorMessages.push('Property value must greater than 0');\r\n      if (isNaN(valueOfPropertyValue)) inputErrors.errorMessages.push('Property value must be a number');\r\n    } else {\r\n      inputErrors.errorMessages.push('');\r\n    };\r\n\r\n    // validate value loan amount\r\n    if (valueOfLoanAmount < 0 || isNaN(valueOfLoanAmount)) {\r\n      inputErrors.inputStatus = false;\r\n      if (valueOfLoanAmount < 0) inputErrors.errorMessages.push('Loan value must greater than 0');\r\n      if (isNaN(valueOfLoanAmount)) inputErrors.errorMessages.push('Loan value must be a number');\r\n    } else {\r\n      inputErrors.errorMessages.push('');\r\n    };\r\n\r\n    // validate loan term\r\n    if (valueOfLoanTerm < 0 || isNaN(valueOfLoanTerm)) {\r\n      inputErrors.inputStatus = false;\r\n      if (valueOfLoanTerm < 0) inputErrors.errorMessages.push('Loan term must greater than 0');\r\n      if (isNaN(valueOfLoanTerm)) inputErrors.errorMessages.push('Loan term must be a number');\r\n    } else {\r\n      inputErrors.errorMessages.push('');\r\n    };\r\n\r\n    // validate interst rate\r\n    if (valueOfInterestRate < 0 || isNaN(valueOfInterestRate)) {\r\n      inputErrors.inputStatus = false;\r\n      if (valueOfInterestRate < 0) inputErrors.errorMessages.push('Interest rate must greater than 0');\r\n      if (isNaN(valueOfInterestRate)) inputErrors.errorMessages.push('Interest rate must be a number');\r\n    } else {\r\n      inputErrors.errorMessages.push('');\r\n    };\r\n\r\n    // validate Disbursement date\r\n    const date = PageLoadController.getDayToDay();\r\n    const [day, month, year] = date.split('/').map(Number);\r\n    const [inputDay, inputMonth, inputYear] = valueOfDisbursementDate.split('/').map(Number);\r\n\r\n    if (inputYear < year) {\r\n      inputErrors.inputStatus = false;\r\n      inputErrors.errorMessages.push('Date cannot be in the past');\r\n    } else {\r\n      if (inputMonth < month) {\r\n        inputErrors.inputStatus = false;\r\n        inputErrors.errorMessages.push('Date cannot be in the past');\r\n      } else {\r\n        if (inputDay < day) {\r\n          inputErrors.inputStatus = false;\r\n          inputErrors.errorMessages.push('Date cannot be in the past');\r\n        } else {\r\n          inputErrors.errorMessages.push('');\r\n        }\r\n      }\r\n    }\r\n    return inputErrors;\r\n  },\r\n\r\n  // function format number to english\r\n  reformater: function (value) {\r\n    if (!isNaN(value) && value !== '') {\r\n      return Number(value).toLocaleString('en');\r\n    };\r\n  },\r\n\r\n  // function check leap year\r\n  isLeapYear: function (year) {\r\n    return (year % 4 === 0 && year % 100 !== 0) || (year % 400 === 0);\r\n  },\r\n\r\n  // function calculate number of date in a month\r\n  getDaysInMonth: function (month, year) {\r\n    return [31, (this.isLeapYear(year) ? 29 : 28), 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][month - 1];\r\n  },\r\n\r\n  // function calculate loan repayment\r\n  calculateRepaymentDate: function (date) {\r\n    const [day, month, year] = date.split('/').map(Number);\r\n    const daysOfMonth = this.getDaysInMonth(month, year);\r\n    let newMonth = month;\r\n    let newDay = day;\r\n    let newYear = year;\r\n    let newDate;\r\n\r\n    newMonth = newMonth + 1;\r\n    if (newMonth > 12) {\r\n      newMonth = 1;\r\n      newYear = newYear + 1;\r\n    };\r\n\r\n    // check Day\r\n    if (newDay > daysOfMonth) {\r\n      newDay = daysOfMonth;\r\n    }\r\n\r\n    newDate = `${newDay}/${newMonth}/${newYear}`;\r\n    return newDate;\r\n  },\r\n\r\n  // export file\r\n  exportToXLSX: function () {\r\n    const result = JSON.parse(localStorage.getItem('result'));\r\n    const worksheet = XLSX.utils.json_to_sheet(result);\r\n    const workbook = XLSX.utils.book_new();\r\n    XLSX.utils.book_append_sheet(workbook, worksheet, 'Loans');\r\n    XLSX.writeFile(workbook, 'loan_data.xlsx');\r\n  }\r\n}\r\n"],"names":[],"version":3,"file":"index.e2e7fb24.js.map","sourceRoot":"/__parcel_source_root/"}